{
    "name": "name",
    "description": "description",
    "url": "url",
    "input_description": "input_description",
    "type": "placeholder-zkllvm",
    "isPrivate": false,
    "definition": {
        "verification_key": "verification_key",
        "proving_key": "; ModuleID = '/root/tmp/zkllvm/examples/arithmetics.cpp'\nsource_filename = \"/root/tmp/zkllvm/examples/arithmetics.cpp\"\ntarget datalayout = \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\"\ntarget triple = \"assigner\"\n\n$_ZN3nil7crypto37algebra6fields17pallas_base_field12modulus_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields17pallas_base_field11number_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields17pallas_base_field10value_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields16vesta_base_field12modulus_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields16vesta_base_field11number_bitsE = comdat any\n\n$_ZN3nil7crypto37algebra6fields16vesta_base_field10value_bitsE = comdat any\n\n@_ZZN3nil7crypto314multiprecision8backends11window_bitsEmE5wsize = internal unnamed_addr constant [6 x [2 x i64]] [[2 x i64] [i64 1434, i64 7], [2 x i64] [i64 539, i64 6], [2 x i64] [i64 197, i64 4], [2 x i64] [i64 70, i64 3], [2 x i64] [i64 17, i64 2], [2 x i64] zeroinitializer], align 8\n@_ZN3nil7crypto37algebra6fields17pallas_base_field12modulus_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields17pallas_base_field11number_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields17pallas_base_field10value_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields16vesta_base_field12modulus_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields16vesta_base_field11number_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n@_ZN3nil7crypto37algebra6fields16vesta_base_field10value_bitsE = weak_odr dso_local local_unnamed_addr constant i64 255, comdat, align 8\n\n; Function Attrs: mustprogress nounwind\ndefine dso_local noundef i64 @_ZN3nil7crypto314multiprecision8backends11window_bitsEm(i64 noundef %0) local_unnamed_addr #0 {\n  br label %2\n\n2:                                                ; preds = %2, %1\n  %3 = phi i64 [ 5, %1 ], [ %8, %2 ]\n  %4 = getelementptr inbounds [6 x [2 x i64]], [6 x [2 x i64]]* @_ZZN3nil7crypto314multiprecision8backends11window_bitsEmE5wsize, i64 0, i64 %3\n  %5 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0\n  %6 = load i64, i64* %5, align 8, !tbaa !3\n  %7 = icmp ugt i64 %6, %0\n  %8 = add i64 %3, -1\n  br i1 %7, label %2, label %9, !llvm.loop !7\n\n9:                                                ; preds = %2\n  %10 = phi i64 [ %3, %2 ]\n  %11 = getelementptr inbounds [6 x [2 x i64]], [6 x [2 x i64]]* @_ZZN3nil7crypto314multiprecision8backends11window_bitsEmE5wsize, i64 0, i64 %10\n  %12 = getelementptr inbounds [2 x i64], [2 x i64]* %11, i64 0, i64 1\n  %13 = load i64, i64* %12, align 8, !tbaa !3\n  %14 = add i64 1, %13\n  ret i64 %14\n}\n\n; Function Attrs: mustprogress nounwind\ndefine dso_local noundef __zkllvm_field_pallas_base @_Z3powu26__zkllvm_field_pallas_basei(__zkllvm_field_pallas_base noundef %0, i32 noundef %1) local_unnamed_addr #0 {\n  %3 = icmp eq i32 %1, 0\n  br i1 %3, label %4, label %5\n\n4:                                                ; preds = %2\n  br label %20\n\n5:                                                ; preds = %2\n  %6 = icmp slt i32 0, %1\n  br i1 %6, label %7, label %10\n\n7:                                                ; preds = %5\n  br label %12\n\n8:                                                ; preds = %16\n  %9 = phi __zkllvm_field_pallas_base [ %15, %16 ]\n  br label %10\n\n10:                                               ; preds = %8, %5\n  %11 = phi __zkllvm_field_pallas_base [ %9, %8 ], [ f0x1, %5 ]\n  br label %19\n\n12:                                               ; preds = %7, %16\n  %13 = phi i32 [ 0, %7 ], [ %17, %16 ]\n  %14 = phi __zkllvm_field_pallas_base [ f0x1, %7 ], [ %15, %16 ]\n  %15 = mul __zkllvm_field_pallas_base %14, %0\n  br label %16\n\n16:                                               ; preds = %12\n  %17 = add nsw i32 %13, 1\n  %18 = icmp slt i32 %17, %1\n  br i1 %18, label %12, label %8, !llvm.loop !10\n\n19:                                               ; preds = %10\n  br label %20\n\n20:                                               ; preds = %19, %4\n  %21 = phi __zkllvm_field_pallas_base [ f0x1, %4 ], [ %11, %19 ]\n  ret __zkllvm_field_pallas_base %21\n}\n\n; Function Attrs: circuit mustprogress nounwind\ndefine dso_local noundef __zkllvm_field_pallas_base @_Z24field_arithmetic_exampleu26__zkllvm_field_pallas_baseu26__zkllvm_field_pallas_base(__zkllvm_field_pallas_base noundef %0, __zkllvm_field_pallas_base noundef %1) local_unnamed_addr #1 {\n  %3 = add __zkllvm_field_pallas_base %0, %1\n  %4 = mul __zkllvm_field_pallas_base %3, %0\n  %5 = add __zkllvm_field_pallas_base %0, %1\n  %6 = mul __zkllvm_field_pallas_base %1, %5\n  %7 = add __zkllvm_field_pallas_base %0, %1\n  %8 = mul __zkllvm_field_pallas_base %6, %7\n  %9 = add __zkllvm_field_pallas_base %4, %8\n  %10 = mul __zkllvm_field_pallas_base %9, %9\n  %11 = mul __zkllvm_field_pallas_base %10, %9\n  %12 = sub __zkllvm_field_pallas_base %1, %0\n  %13 = sdiv __zkllvm_field_pallas_base %11, %12\n  %14 = tail call noundef __zkllvm_field_pallas_base @_Z3powu26__zkllvm_field_pallas_basei(__zkllvm_field_pallas_base noundef %0, i32 noundef 2)\n  %15 = add __zkllvm_field_pallas_base %13, %14\n  %16 = add __zkllvm_field_pallas_base %15, f0x12345678901234567890\n  ret __zkllvm_field_pallas_base %16\n}\n\nattributes #0 = { mustprogress nounwind \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" }\nattributes #1 = { circuit mustprogress nounwind \"frame-pointer\"=\"all\" \"min-legal-vector-width\"=\"0\" \"no-trapping-math\"=\"true\" \"stack-protector-buffer-size\"=\"8\" }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !\"wchar_size\", i32 4}\n!1 = !{i32 7, !\"frame-pointer\", i32 2}\n!2 = !{!\"clang version 16.0.0 (git@github.com:NilFoundation/zkllvm-circifier.git 4d230ed398898e2328862fbde0e76a377d7d8884)\"}\n!3 = !{!4, !4, i64 0}\n!4 = !{!\"long\", !5, i64 0}\n!5 = !{!\"omnipotent char\", !6, i64 0}\n!6 = !{!\"Simple C++ TBAA\"}\n!7 = distinct !{!7, !8, !9}\n!8 = !{!\"llvm.loop.mustprogress\"}\n!9 = !{!\"llvm.loop.unroll.disable\"}\n!10 = distinct !{!10, !8, !9}\n"
    }
}